{
  "pipes": [],
  "interfaces": [
    {
      "name": "Category",
      "id": "interface-Category-891939ffaa09a24ba86ba54c41c6c72b",
      "file": "src/app/modules/meditation/models/category.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Category {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl: string;\n}\n",
      "properties": [
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "imageUrl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "HomeModuleState",
      "id": "interface-HomeModuleState-3fbdfcf8d4f7208b6aa611a082a4e477",
      "file": "src/app/modules/home/store/reducers/home.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { createFeatureSelector } from '@ngrx/store';\n\n// Store\nimport { HomeState } from '@home/store/reducers/home.reducer';\n\n// Reducer\nimport { reducer } from '@home/store/reducers/home.reducer';\n\nexport const homeFeatureKey = 'home';\n\nexport interface HomeModuleState {\n  home: HomeState;\n}\n\nexport const reducers = {\n  home: reducer,\n};\n\nexport const selectHomeModuleState =\n  createFeatureSelector<HomeModuleState>(homeFeatureKey);\n",
      "properties": [
        {
          "name": "home",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HomeState",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "HomeState",
      "id": "interface-HomeState-93433062d57ab59c41aa02b4023049cd",
      "file": "src/app/modules/home/store/reducers/home.reducer.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\n\n// Actions\nimport {\n  loadQuote,\n  loadQuoteFailure,\n  loadQuoteSuccess,\n} from '@home/store/actions/home.actions';\n\nexport interface HomeState {\n  // data\n  quote: string;\n  // state\n  isQuoteLoading: boolean;\n  isQuoteLoaded: boolean;\n  isQuoteError: boolean;\n}\n\nexport const initialState: HomeState = {\n  // data\n  quote: null,\n  // state\n  isQuoteLoading: false,\n  isQuoteLoaded: false,\n  isQuoteError: false,\n};\n\nconst homeReducer = createReducer(\n  initialState,\n\n  on(\n    loadQuote,\n    (state): HomeState => ({\n      ...state,\n      isQuoteLoading: true,\n      isQuoteLoaded: false,\n      isQuoteError: false,\n    }),\n  ),\n\n  on(\n    loadQuoteFailure,\n    (state): HomeState => ({\n      ...state,\n      isQuoteLoading: false,\n      isQuoteLoaded: false,\n      isQuoteError: true,\n    }),\n  ),\n\n  on(\n    loadQuoteSuccess,\n    (state, { quote }): HomeState => ({\n      ...state,\n      quote,\n      isQuoteLoading: false,\n      isQuoteLoaded: true,\n      isQuoteError: false,\n    }),\n  ),\n);\n\nexport const reducer = (state: HomeState | undefined, action: Action) =>\n  homeReducer(state, action);\n\n// Data\nexport const quoteData = (state: HomeState) => state.quote;\n// State\nexport const quoteLoadingState = (state: HomeState) => state.isQuoteLoading;\nexport const quoteLoadedState = (state: HomeState) => state.isQuoteLoaded;\nexport const quoteErrorState = (state: HomeState) => state.isQuoteError;\n",
      "properties": [
        {
          "name": "isQuoteError",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "isQuoteLoaded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "isQuoteLoading",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "quote",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "MediaState",
      "id": "interface-MediaState-cc6b19c6c6151fc96fd36ef59e6d7f92",
      "file": "src/app/modules/meditation/models/media.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface MediaState {\n  canPlay: boolean;\n  duration: string;\n  durationSec: number;\n  time: string;\n  timeSec: number;\n  mediaType: string;\n  loadStart: boolean;\n  playing: boolean;\n}\n",
      "properties": [
        {
          "name": "canPlay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "duration",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "durationSec",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "loadStart",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "mediaType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "playing",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "time",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "timeSec",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "Meditation",
      "id": "interface-Meditation-f36f5b0cb5e69e598473dddf0de68d26",
      "file": "src/app/modules/meditation/models/meditation.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Meditation {\n  id: string;\n  categoryId: string;\n  title: string;\n  text: string | null;\n  media: string | null;\n  imageUrl: string | null;\n}\n\nexport const content = {\n  media: 'media',\n  text: 'text',\n} as const;\n\nexport type ContentTypes = typeof content[keyof typeof content];\n",
      "properties": [
        {
          "name": "categoryId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "imageUrl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "media",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "MeditationModuleState",
      "id": "interface-MeditationModuleState-ec10a4b2de4d11d3ce0bdd573681673c",
      "file": "src/app/modules/meditation/store/reducers/meditation.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { createFeatureSelector } from '@ngrx/store';\n\n// Store\nimport { MeditationState } from '@meditation/store/reducers/meditation.reducer';\n\n// Reducers\nimport { reducer } from '@meditation/store/reducers/meditation.reducer';\n\nexport const meditationFeatureKey = 'meditation';\n\nexport interface MeditationModuleState {\n  meditation: MeditationState;\n}\n\nexport const reducers = {\n  meditation: reducer,\n};\n\nexport const selectMeditationModuleState =\n  createFeatureSelector<MeditationModuleState>(meditationFeatureKey);\n",
      "properties": [
        {
          "name": "meditation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MeditationState",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "MeditationState",
      "id": "interface-MeditationState-3a1bf64e91aaa0ecac4d7cd82b507681",
      "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\n\n// Actions\nimport {\n  loadCategoriesSuccess,\n  loadMeditations,\n  loadMeditationsFailure,\n  loadMeditationsSuccess,\n  loadCategories,\n  loadCategoriesFailure,\n} from '@meditation/store/actions/meditation.actions';\n\n// Models\nimport { Meditation } from '@meditation/models/meditation.model';\nimport { Category } from '@meditation/models/category.model';\n\nexport interface MeditationState {\n  // data\n  meditations: Meditation[];\n  categories: Category[];\n  // state\n  isCategoriesLoading: boolean;\n  isCategoriesLoaded: boolean;\n  isCategoriesError: boolean;\n  isMeditationsLoading: boolean;\n  isMeditationsLoaded: boolean;\n  isMeditationsError: boolean;\n}\n\nexport const initialState: MeditationState = {\n  // data\n  meditations: null,\n  categories: null,\n  // state\n  isCategoriesLoading: false,\n  isCategoriesLoaded: false,\n  isCategoriesError: false,\n  isMeditationsLoading: false,\n  isMeditationsLoaded: false,\n  isMeditationsError: false,\n};\n\nconst meditationReducer = createReducer(\n  initialState,\n\n  on(\n    loadCategories,\n    (state): MeditationState => ({\n      ...state,\n      isCategoriesLoading: true,\n      isCategoriesLoaded: false,\n      isCategoriesError: false,\n    }),\n  ),\n\n  on(\n    loadCategoriesFailure,\n    (state): MeditationState => ({\n      ...state,\n      isCategoriesLoading: false,\n      isCategoriesLoaded: false,\n      isCategoriesError: true,\n    }),\n  ),\n\n  on(\n    loadCategoriesSuccess,\n    (state, { categories }): MeditationState => ({\n      ...state,\n      categories,\n      isCategoriesLoading: false,\n      isCategoriesLoaded: true,\n      isCategoriesError: false,\n    }),\n  ),\n\n  on(\n    loadMeditations,\n    (state): MeditationState => ({\n      ...state,\n      isMeditationsLoading: true,\n      isMeditationsLoaded: false,\n      isMeditationsError: false,\n    }),\n  ),\n\n  on(\n    loadMeditationsFailure,\n    (state): MeditationState => ({\n      ...state,\n      isMeditationsLoading: false,\n      isMeditationsLoaded: false,\n      isMeditationsError: true,\n    }),\n  ),\n\n  on(\n    loadMeditationsSuccess,\n    (state, { meditations }): MeditationState => ({\n      ...state,\n      meditations,\n      isMeditationsLoading: false,\n      isMeditationsLoaded: true,\n      isMeditationsError: false,\n    }),\n  ),\n);\n\nexport const reducer = (state: MeditationState | undefined, action: Action) =>\n  meditationReducer(state, action);\n\n// Data\nexport const meditationsData = (state: MeditationState) => state.meditations;\nexport const categoriesData = (state: MeditationState) => state.categories;\n// State\nexport const categoriesLoadingState = (state: MeditationState) =>\n  state.isCategoriesLoading;\nexport const categoriesLoadedState = (state: MeditationState) =>\n  state.isCategoriesLoaded;\nexport const categoriesErrorState = (state: MeditationState) =>\n  state.isCategoriesError;\nexport const meditationsLoadingState = (state: MeditationState) =>\n  state.isMeditationsLoading;\nexport const meditationsLoadedState = (state: MeditationState) =>\n  state.isMeditationsLoaded;\nexport const meditationsErrorState = (state: MeditationState) =>\n  state.isMeditationsError;\n",
      "properties": [
        {
          "name": "categories",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Category[]",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "isCategoriesError",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "isCategoriesLoaded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "isCategoriesLoading",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "isMeditationsError",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "isMeditationsLoaded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "isMeditationsLoading",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "meditations",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meditation[]",
          "optional": false,
          "description": "",
          "line": 19
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "Quote",
      "id": "interface-Quote-12c787347eecf8acaa5e5be6e8b83ff2",
      "file": "src/app/modules/home/models/quote.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Quote {\n  content: string;\n  current: boolean;\n}\n",
      "properties": [
        {
          "name": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "current",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "AudioService",
      "id": "injectable-AudioService-797ec03970a03b3e625b8cab9149778d",
      "file": "src/app/modules/meditation/services/audio.service.ts",
      "properties": [
        {
          "name": "audioObj",
          "defaultValue": "new Audio()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "initializeStream",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "pause",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "play",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "seekTo",
          "args": [
            {
              "name": "seconds",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "seconds",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "streamObservable",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<CustomEvent>",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\n// Services\nimport { AudioStateService } from 'app/modules/meditation/services/audio-state.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AudioService {\n  private audioObj = new Audio();\n\n  constructor(private state: AudioStateService) {}\n\n  play(): void {\n    this.audioObj.play();\n  }\n\n  pause(): void {\n    this.audioObj.pause();\n  }\n\n  seekTo(seconds: number): void {\n    this.audioObj.currentTime = seconds;\n  }\n\n  initializeStream(url: string): void {\n    const $stream = this.streamObservable(url);\n    this.state.initializeState($stream);\n  }\n\n  private streamObservable(url: string): Observable<CustomEvent> {\n    const events = [\n      'ended',\n      'error',\n      'play',\n      'playing',\n      'pause',\n      'timeupdate',\n      'canplay',\n      'loadedmetadata',\n      'loadstart',\n    ];\n\n    const addEvents = (obj: HTMLAudioElement, eventKeys: string[], handler) => {\n      eventKeys.forEach((event: string) => {\n        obj.addEventListener(event, handler);\n      });\n    };\n\n    const removeEvents = (obj, eventKeys: string[], handler) => {\n      eventKeys.forEach((event: string) => {\n        obj.removeEventListener(event, handler);\n      });\n    };\n\n    return new Observable((observer) => {\n      this.audioObj.src = url;\n      this.audioObj.load();\n      this.audioObj.play();\n\n      const handler = (event: CustomEvent) => observer.next(event);\n      addEvents(this.audioObj, events, handler);\n\n      return () => {\n        this.audioObj.pause();\n        this.audioObj.currentTime = 0;\n\n        removeEvents(this.audioObj, events, handler);\n      };\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "state",
            "type": "AudioStateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "state",
            "type": "AudioStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "AudioStateService",
      "id": "injectable-AudioStateService-cca9a1cd94125fedcd1a8372ce299641",
      "file": "src/app/modules/meditation/services/audio-state.service.ts",
      "properties": [
        {
          "name": "$media",
          "defaultValue": "this.mediaSubject\n    .asObservable()\n    .pipe(shareReplay())",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<MediaState>",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [143]
        },
        {
          "name": "mediaSubject",
          "defaultValue": "new BehaviorSubject<MediaState>(INITIAL_MEDIA_STATE)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [121]
        },
        {
          "name": "streamSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "initializeState",
          "args": [
            {
              "name": "$obs",
              "type": "Observable<CustomEvent>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "$obs",
              "type": "Observable<CustomEvent>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\n// Utils\nimport { formatTime } from '@meditation/utils/time.utils';\n\n// Constants\nimport { INITIAL_MEDIA_STATE } from '@meditation/constants/media.constants';\n\n// Models\nimport { MediaState } from '@meditation/models/media.model';\n\n@Injectable()\nexport class AudioStateService {\n  private streamSubscription: Subscription;\n  private mediaSubject = new BehaviorSubject<MediaState>(INITIAL_MEDIA_STATE);\n\n  readonly $media: Observable<MediaState> = this.mediaSubject\n    .asObservable()\n    .pipe(shareReplay());\n\n  get media(): MediaState {\n    return this.mediaSubject.value;\n  }\n  set media(value: MediaState) {\n    this.mediaSubject.next(value);\n  }\n\n  constructor() {}\n\n  reset(): void {\n    if (this.streamSubscription) {\n      this.streamSubscription.unsubscribe();\n    }\n    this.media = INITIAL_MEDIA_STATE;\n  }\n\n  initializeState($obs: Observable<CustomEvent>): void {\n    this.streamSubscription = $obs.subscribe((event: CustomEvent) => {\n      const audioObj = event.target as HTMLAudioElement;\n\n      switch (event.type) {\n        case 'canplay':\n          this.media = { ...this.media, canPlay: true };\n          break;\n\n        case 'loadedmetadata':\n          const duration = formatTime(audioObj.duration, 'mm:ss');\n\n          this.media = {\n            ...this.media,\n            duration,\n            durationSec: audioObj.duration,\n            mediaType: 'mp3',\n          };\n          break;\n\n        case 'playing':\n          this.media = { ...this.media, playing: true };\n          break;\n\n        case 'pause':\n          this.media = { ...this.media, playing: false };\n          break;\n\n        case 'timeupdate':\n          const timeSec = audioObj.currentTime;\n          const time = formatTime(audioObj.currentTime, 'mm:ss');\n          this.media = { ...this.media, time, timeSec };\n          break;\n\n        case 'loadstart':\n          this.media = { ...this.media, loadStart: true };\n          break;\n      }\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 29
      },
      "accessors": {
        "media": {
          "name": "media",
          "setSignature": {
            "name": "media",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "MediaState",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "MediaState",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "media",
            "type": "",
            "returnType": "MediaState",
            "line": 24
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "CategoriesLoadEffect",
      "id": "injectable-CategoriesLoadEffect-df486cde31944c2aa9b5715902f70e39",
      "file": "src/app/modules/meditation/store/effects/categories-load.effect.ts",
      "properties": [
        {
          "name": "loadCategories$",
          "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadCategories),\n      mergeMap(() =>\n        this.meditationsService.getMeditationCategories().pipe(\n          map((categories: Category[]) =>\n            loadCategoriesSuccess({\n              categories,\n            }),\n          ),\n          catchError((error) => of(loadCategoriesFailure(error))),\n        ),\n      ),\n    ),\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23
        }
      ],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\n\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\n\n// Actions\nimport {\n  loadCategories,\n  loadCategoriesFailure,\n  loadCategoriesSuccess,\n} from '@meditation/store/actions/meditation.actions';\n\n// Services\nimport { MeditationsService } from '@meditation/services/meditations.service';\n\n// Models\nimport { Category } from '@meditation/models/category.model';\n\n@Injectable()\nexport class CategoriesLoadEffect {\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadCategories),\n      mergeMap(() =>\n        this.meditationsService.getMeditationCategories().pipe(\n          map((categories: Category[]) =>\n            loadCategoriesSuccess({\n              categories,\n            }),\n          ),\n          catchError((error) => of(loadCategoriesFailure(error))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(\n    private actions$: Actions,\n    private meditationsService: MeditationsService,\n  ) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "actions$",
            "type": "Actions",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "meditationsService",
            "type": "MeditationsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "actions$",
            "type": "Actions",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "meditationsService",
            "type": "MeditationsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "MeditationsLoadEffect",
      "id": "injectable-MeditationsLoadEffect-2ec69398cad2e4214bbba8b2dcb8d5d0",
      "file": "src/app/modules/meditation/store/effects/meditations-load.effect.ts",
      "properties": [
        {
          "name": "loadMeditations$",
          "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadMeditations),\n      mergeMap(() =>\n        this.meditationsService.getMeditations().pipe(\n          map((meditations: Meditation[]) =>\n            loadMeditationsSuccess({\n              meditations,\n            }),\n          ),\n          catchError((error) => of(loadMeditationsFailure(error))),\n        ),\n      ),\n    ),\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23
        }
      ],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\n\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\n\n// Actions\nimport {\n  loadMeditations,\n  loadMeditationsFailure,\n  loadMeditationsSuccess,\n} from '@meditation/store/actions/meditation.actions';\n\n// Services\nimport { MeditationsService } from '@meditation/services/meditations.service';\n\n// Models\nimport { Meditation } from '@meditation/models/meditation.model';\n\n@Injectable()\nexport class MeditationsLoadEffect {\n  loadMeditations$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadMeditations),\n      mergeMap(() =>\n        this.meditationsService.getMeditations().pipe(\n          map((meditations: Meditation[]) =>\n            loadMeditationsSuccess({\n              meditations,\n            }),\n          ),\n          catchError((error) => of(loadMeditationsFailure(error))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(\n    private actions$: Actions,\n    private meditationsService: MeditationsService,\n  ) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "actions$",
            "type": "Actions",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "meditationsService",
            "type": "MeditationsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "actions$",
            "type": "Actions",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "meditationsService",
            "type": "MeditationsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "MeditationsService",
      "id": "injectable-MeditationsService-63651c90b0e393c718598f80a893aee5",
      "file": "src/app/modules/meditation/services/meditations.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "getMeditationCategories",
          "args": [],
          "optional": false,
          "returnType": "Observable<Category[]>",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getMeditations",
          "args": [],
          "optional": false,
          "returnType": "Observable<Meditation[]>",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  AngularFirestore,\n  QuerySnapshot,\n} from '@angular/fire/compat/firestore';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Models\nimport { Meditation } from '@meditation/models/meditation.model';\nimport { Category } from '@meditation/models/category.model';\n\n@Injectable()\nexport class MeditationsService {\n  constructor(private firestore: AngularFirestore) {}\n\n  getMeditationCategories(): Observable<Category[]> {\n    return this.firestore\n      .collection<Category>('meditation_categories')\n      .get()\n      .pipe(\n        map((snapshot: QuerySnapshot<Category>) =>\n          snapshot.docs.map((doc) => doc.data()),\n        ),\n      );\n  }\n\n  getMeditations(): Observable<Meditation[]> {\n    return this.firestore\n      .collection<Meditation>('meditations')\n      .get()\n      .pipe(\n        map((snapshot: QuerySnapshot<Meditation>) =>\n          snapshot.docs.map((doc) => doc.data()),\n        ),\n      );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "firestore",
            "type": "AngularFirestore",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "firestore",
            "type": "AngularFirestore",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "QuoteLoadEffect",
      "id": "injectable-QuoteLoadEffect-b319d8f9ee6e51d1b37d1fab844f587e",
      "file": "src/app/modules/home/store/effects/quote-load.effect.ts",
      "properties": [
        {
          "name": "loadQuote$",
          "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadQuote),\n      mergeMap(() =>\n        this.quoteService.getDailyQuote().pipe(\n          map((quote: string) =>\n            loadQuoteSuccess({\n              quote,\n            }),\n          ),\n          catchError((error) => of(loadQuoteFailure(error))),\n        ),\n      ),\n    ),\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21
        }
      ],
      "methods": [
        {
          "name": "ngrxOnInitEffects",
          "args": [],
          "optional": false,
          "returnType": "Action",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\n\nimport { Actions, createEffect, ofType, OnInitEffects } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\n\n// Actions\nimport {\n  loadQuote,\n  loadQuoteFailure,\n  loadQuoteSuccess,\n} from '@home/store/actions/home.actions';\n\n// Services\nimport { QuoteService } from '@home/services/quote.service';\n\n@Injectable()\nexport class QuoteLoadEffect implements OnInitEffects {\n  loadQuote$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadQuote),\n      mergeMap(() =>\n        this.quoteService.getDailyQuote().pipe(\n          map((quote: string) =>\n            loadQuoteSuccess({\n              quote,\n            }),\n          ),\n          catchError((error) => of(loadQuoteFailure(error))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(private actions$: Actions, private quoteService: QuoteService) {}\n\n  ngrxOnInitEffects(): Action {\n    return loadQuote();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "actions$",
            "type": "Actions",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "quoteService",
            "type": "QuoteService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 35,
        "jsdoctags": [
          {
            "name": "actions$",
            "type": "Actions",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "quoteService",
            "type": "QuoteService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "QuoteService",
      "id": "injectable-QuoteService-6727b9dad868250fb68e638b603d5093",
      "file": "src/app/modules/home/services/quote.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "getDailyQuote",
          "args": [],
          "optional": false,
          "returnType": "Observable<string>",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  AngularFirestore,\n  CollectionReference,\n  QuerySnapshot,\n} from '@angular/fire/compat/firestore';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// Models\nimport { Quote } from '@home/models/quote.model';\n\n@Injectable()\nexport class QuoteService {\n  constructor(private firestore: AngularFirestore) {}\n\n  getDailyQuote(): Observable<string> {\n    return this.firestore\n      .collection<Quote>('quotes', (ref: CollectionReference) =>\n        ref.where('current', '==', true),\n      )\n      .get()\n      .pipe(\n        map(\n          (snapshot: QuerySnapshot<Quote>) =>\n            snapshot.docs && snapshot.docs[0].data(),\n        ),\n        map((quote: Quote) => quote.content),\n      );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "firestore",
            "type": "AngularFirestore",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "firestore",
            "type": "AngularFirestore",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    }
  ],
  "guards": [
    {
      "name": "CategoriesGuard",
      "id": "injectable-CategoriesGuard-d7b4bdbb1bca3c09fba5d4cc1d43d1e7",
      "file": "src/app/modules/meditation/guards/categories.guard.ts",
      "properties": [],
      "methods": [
        {
          "name": "canActivate",
          "args": [],
          "optional": false,
          "returnType": "Observable<boolean>",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\nimport { Store } from '@ngrx/store';\n\n// Actions\nimport { loadCategories } from '@meditation/store/actions/meditation.actions';\n\n// Selectors\nimport { selectIsCategoriesLoaded } from '@meditation/store/selectors/meditation.selector';\n\n@Injectable()\nexport class CategoriesGuard implements CanActivate {\n  constructor(private store: Store) {}\n\n  canActivate(): Observable<boolean> {\n    return this.store.select(selectIsCategoriesLoaded).pipe(\n      tap(\n        (isLoaded: boolean) =>\n          isLoaded || this.store.dispatch(loadCategories()),\n      ),\n      switchMap(() => of(true)),\n    );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "guard"
    },
    {
      "name": "MeditationsGuard",
      "id": "injectable-MeditationsGuard-5bb4075fadd6dc454966dbedef2403f0",
      "file": "src/app/modules/meditation/guards/meditations.guard.ts",
      "properties": [],
      "methods": [
        {
          "name": "canActivate",
          "args": [],
          "optional": false,
          "returnType": "Observable<boolean>",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\nimport { Store } from '@ngrx/store';\n\n// Actions\nimport { loadMeditations } from '@meditation/store/actions/meditation.actions';\n\n// Selectors\nimport { selectIsMeditationsLoaded } from '@meditation/store/selectors/meditation.selector';\n\n@Injectable()\nexport class MeditationsGuard implements CanActivate {\n  constructor(private store: Store) {}\n\n  canActivate(): Observable<boolean> {\n    return this.store.select(selectIsMeditationsLoaded).pipe(\n      tap(\n        (isLoaded: boolean) =>\n          isLoaded || this.store.dispatch(loadMeditations()),\n      ),\n      switchMap(() => of(true)),\n    );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "guard"
    }
  ],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-a5022b01919437237993f53825e23c5a",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": ["app.component.scss"],
      "styles": [],
      "templateUrl": ["app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "initializeApp",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\nimport { Platform } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent {\n  constructor(\n    private platform: Platform,\n    private splashScreen: SplashScreen,\n    private statusBar: StatusBar,\n  ) {\n    this.initializeApp();\n  }\n\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "app.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "platform",
            "type": "Platform",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "splashScreen",
            "type": "SplashScreen",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "statusBar",
            "type": "StatusBar",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "platform",
            "type": "Platform",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "splashScreen",
            "type": "SplashScreen",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "statusBar",
            "type": "StatusBar",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<ion-app>\n  <ion-tabs>\n    <ion-tab-bar slot=\"bottom\">\n      <ion-tab-button tab=\"home\">\n        <ion-icon name=\"cafe-outline\"></ion-icon>\n        <ion-label>Home</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"meditation\">\n        <ion-icon name=\"leaf-outline\"></ion-icon>\n        <ion-label>Meditation</ion-label>\n      </ion-tab-button>\n\n      <ion-tab-button tab=\"timer\">\n        <ion-icon name=\"time-outline\"></ion-icon>\n        <ion-label>Timer</ion-label>\n      </ion-tab-button>\n    </ion-tab-bar>\n  </ion-tabs>\n</ion-app>\n"
    },
    {
      "name": "ButtonsSelectComponent",
      "id": "component-ButtonsSelectComponent-8d83a6f1543c333d15ef8e090899bbe2",
      "file": "src/app/common/ui-lib/buttons-select/components/buttons-select.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-buttons-select",
      "styleUrls": ["./buttons-select.component.scss"],
      "styles": [],
      "templateUrl": ["./buttons-select.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "multiple",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean"
        },
        {
          "name": "options",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "any[]"
        },
        {
          "name": "value",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "any[]"
        }
      ],
      "outputsClass": [
        {
          "name": "valueChange",
          "defaultValue": "new EventEmitter<any[]>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "toggle",
          "args": [
            {
              "name": "type",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "type",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-buttons-select',\n  templateUrl: './buttons-select.component.html',\n  styleUrls: ['./buttons-select.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonsSelectComponent {\n  @Input()\n  options: any[] = [];\n\n  @Input()\n  multiple = false;\n\n  @Input()\n  value: any[] = [];\n\n  @Output()\n  valueChange = new EventEmitter<any[]>();\n\n  constructor() {}\n\n  toggle(type: any): void {\n    const selection = new Set(this.value);\n\n    if (this.multiple) {\n      selection.has(type) ? selection.delete(type) : selection.add(type);\n    } else {\n      selection.clear();\n      selection.add(type);\n    }\n\n    this.value = [...selection];\n    this.valueChange.emit([...selection]);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".selection {\n  width: 168px;\n  padding: 8px;\n\n  &__button {\n    font-size: 12px;\n    width: 70px;\n    height: 30px;\n    box-shadow: #0000001f 0 1px 2px;\n    border-radius: 15px;\n    --background: #fff;\n    --color: #666;\n    --border-width: 2px;\n    --border-style: solid;\n    --border-color: #bebdbd;\n    --background-activated: none;\n    --border-radius: 15px;\n\n    &-selected {\n      --background: #9eb4bb;\n      --color: #fff;\n    }\n  }\n}\n",
          "styleUrl": "./buttons-select.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 26
      },
      "templateData": "<div class=\"selection\" fxLayoutAlign=\"space-between\">\n  <ion-button\n    class=\"selection__button\"\n    fill=\"solid\"\n    *ngFor=\"let option of options\"\n    [ngClass]=\"{ 'selection__button-selected': value.includes(option) }\"\n    (click)=\"toggle(option)\"\n  >\n    {{ option | titlecase }}\n  </ion-button>\n</div>\n"
    },
    {
      "name": "CategoriesComponent",
      "id": "component-CategoriesComponent-663bcb7a825db5495d3d0a92cbddc0fc",
      "file": "src/app/modules/meditation/pages/categories/categories.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-categories",
      "styleUrls": ["./categories.component.scss"],
      "styles": [],
      "templateUrl": ["./categories.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "$categories",
          "defaultValue": "this.store.select(selectCategories)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<Category[]>",
          "optional": false,
          "description": "",
          "line": 20
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { Store } from '@ngrx/store';\n\n// Models\nimport { Category } from '@meditation/models/category.model';\n\n// Selectors\nimport { selectCategories } from '@meditation/store/selectors/meditation.selector';\n\n@Component({\n  selector: 'app-categories',\n  templateUrl: './categories.component.html',\n  styleUrls: ['./categories.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoriesComponent {\n  $categories: Observable<Category[]> = this.store.select(selectCategories);\n\n  constructor(private store: Store) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".title {\n  font-size: 28px;\n  text-align: center;\n  margin-top: 20px;\n  font-weight: 400;\n}\n\nion-content {\n  --padding-top: 20px;\n  --ion-grid-padding: 8px;\n  --ion-grid-column-padding: 8px;\n  --background: url('../../../../../assets/images/mountains.jpg') center / cover;\n\n  ion-col {\n    --ion-card-background: #ddf0fe;\n\n    &:first-child,\n    &:last-child {\n      --ion-card-background: #f9eedb;\n    }\n  }\n}\n",
          "styleUrl": "./categories.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<ion-header>\n  <ion-toolbar>\n    <h4 class=\"title\">Categories</h4>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content forceOverscroll>\n  <ion-grid>\n    <ion-row class=\"ion-justify-content-around\">\n      <ion-col *ngFor=\"let category of $categories | async\">\n        <app-category-card [category]=\"category\"></app-category-card>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-content>\n"
    },
    {
      "name": "CategoryCardComponent",
      "id": "component-CategoryCardComponent-2ed244fb233898f0ab27924c935ac977",
      "file": "src/app/modules/meditation/components/category-card/category-card.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-category-card",
      "styleUrls": ["./category-card.component.scss"],
      "styles": [],
      "templateUrl": ["./category-card.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "category",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "Category"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n// Models\nimport { Category } from '@meditation/models/category.model';\n\n@Component({\n  selector: 'app-category-card',\n  templateUrl: './category-card.component.html',\n  styleUrls: ['./category-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryCardComponent {\n  @Input()\n  category: Category;\n\n  constructor() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".card {\n  height: 245px;\n  width: 145px;\n  margin: auto;\n\n  &:focus {\n    outline: none;\n  }\n}\n",
          "styleUrl": "./category-card.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 14
      },
      "templateData": "<ion-card\n  button\n  class=\"card\"\n  fxLayout=\"column\"\n  fxLayoutAlign=\"center\"\n  routerDirection=\"forward\"\n  [queryParams]=\"{ categoryId: category.id }\"\n  [routerLink]=\"['/meditation', 'meditations']\"\n>\n  <ion-card-content\n    class=\"card__content\"\n    fxLayout=\"column\"\n    fxLayoutAlign=\"space-between center\"\n    fxLayoutGap=\"16px\"\n  >\n    <img [src]=\"category.imageUrl\" />\n    <span class=\"card__name\">{{ category.name | titlecase }}</span>\n  </ion-card-content>\n</ion-card>\n"
    },
    {
      "name": "HomeComponent",
      "id": "component-HomeComponent-f427be60c8f57715d31bb4fdae7c7045",
      "file": "src/app/modules/home/pages/home/home.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-home",
      "styleUrls": ["./home.component.scss"],
      "styles": [],
      "templateUrl": ["./home.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "$quote",
          "defaultValue": "this.store.select(selectQuote)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<string>",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Observable } from 'rxjs';\n\nimport { Store } from '@ngrx/store';\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\n\n// Selectors\nimport { selectQuote } from '@home/store/selectors/home.selector';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HomeComponent {\n  $quote: Observable<string> = this.store.select(selectQuote);\n\n  constructor(private store: Store) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".home {\n  height: 100%;\n  background: url('../../../../../assets/images/mountains.jpg');\n  background-size: cover;\n\n  &__quote {\n    font-size: 18px;\n    line-height: 27px;\n    font-style: italic;\n    opacity: 0.8;\n    color: #1f1f1f;\n    text-align: center;\n  }\n}\n",
          "styleUrl": "./home.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<ion-content [scrollY]=\"false\">\n  <div class=\"home\" fxLayoutAlign=\"center center\">\n    <span class=\"home__quote\">{{ $quote | async }}</span>\n  </div>\n</ion-content>\n"
    },
    {
      "name": "MediaContentComponent",
      "id": "component-MediaContentComponent-8c93b3349cc87f3b819f1ac85f2d113f",
      "file": "src/app/modules/meditation/components/media-content/media-content.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-media-content",
      "styleUrls": ["./media-content.component.scss"],
      "styles": [],
      "templateUrl": ["./media-content.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "media",
          "defaultValue": "INITIAL_MEDIA_STATE",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "MediaState"
        },
        {
          "name": "meditation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "Meditation"
        },
        {
          "name": "seekbarValue",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "pauseAudio",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "EventEmitter"
        },
        {
          "name": "playAudio",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "EventEmitter"
        },
        {
          "name": "seekEnd",
          "defaultValue": "new EventEmitter<MouseEvent | TouchEvent>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { INITIAL_MEDIA_STATE } from '@meditation/constants/media.constants';\n\n// Models\nimport { MediaState } from '@meditation/models/media.model';\nimport { Meditation } from '@meditation/models/meditation.model';\n\n@Component({\n  selector: 'app-media-content',\n  templateUrl: './media-content.component.html',\n  styleUrls: ['./media-content.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaContentComponent {\n  @Input()\n  meditation: Meditation;\n\n  @Input()\n  seekbarValue: number;\n\n  @Input()\n  media: MediaState = INITIAL_MEDIA_STATE;\n\n  @Output()\n  playAudio = new EventEmitter<void>();\n\n  @Output()\n  pauseAudio = new EventEmitter<void>();\n\n  @Output()\n  seekEnd = new EventEmitter<MouseEvent | TouchEvent>();\n\n  constructor() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".media {\n  padding-bottom: 20px;\n  height: 100%;\n\n  &__image {\n    width: 100%;\n  }\n}\n\n.commands {\n  width: 85%;\n\n  &__play {\n    width: 38px;\n    height: 38px;\n    background-color: #4e6b8c;\n    border-radius: 50%;\n  }\n\n  &__icon {\n    --ionicon-stroke-width: 11px;\n    font-size: 20px;\n    color: #fff;\n  }\n\n  &__range {\n    --knob-size: 14px;\n    --bar-background: #d3dae2;\n    --bar-background-active: #4e6b8c;\n    --bar-height: 3px;\n    --knob-size: 18px;\n    width: 315px;\n    max-height: 32px;\n    padding: 0 7px;\n    width: 100%;\n  }\n\n  &__progress {\n    width: 100%;\n    color: #999da1;\n    font-weight: 500;\n    font-size: 15px;\n  }\n}\n",
          "styleUrl": "./media-content.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 37
      },
      "templateData": "<div class=\"media\" fxLayout=\"column\" fxLayoutAlign=\"space-around center\">\n  <img\n    class=\"media__image\"\n    *ngIf=\"meditation.imageUrl\"\n    [src]=\"meditation.imageUrl\"\n  />\n\n  <div class=\"commands\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n    <div class=\"commands__play\" fxLayoutAlign=\"center center\">\n      <ion-icon\n        class=\"commands__icon\"\n        name=\"play\"\n        *ngIf=\"!media.playing\"\n        (click)=\"playAudio.emit()\"\n      ></ion-icon>\n\n      <ion-icon\n        class=\"commands__icon\"\n        name=\"pause\"\n        *ngIf=\"media.playing\"\n        (click)=\"pauseAudio.emit()\"\n      ></ion-icon>\n    </div>\n\n    <ion-range\n      class=\"commands__range\"\n      name=\"seekbar\"\n      mode=\"md\"\n      min=\"0\"\n      [max]=\"media.durationSec\"\n      [value]=\"seekbarValue\"\n      (mouseup)=\"seekEnd.emit($event)\"\n      (touchend)=\"seekEnd.emit($event)\"\n    >\n    </ion-range>\n\n    <div class=\"commands__progress\" fxLayoutAlign=\"space-between center\">\n      <span>{{ media.time }}</span>\n      <span>{{ media.duration }}</span>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "MeditationHeaderComponent",
      "id": "component-MeditationHeaderComponent-0af044f1727c183c9a837d8e0f36aab0",
      "file": "src/app/modules/meditation/components/meditation-header/meditation-header.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-meditation-header",
      "styleUrls": ["./meditation-header.component.scss"],
      "styles": [],
      "templateUrl": ["./meditation-header.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "category",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "Category"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n// Models\nimport { Category } from '@meditation/models/category.model';\n\n@Component({\n  selector: 'app-meditation-header',\n  templateUrl: './meditation-header.component.html',\n  styleUrls: ['./meditation-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MeditationHeaderComponent {\n  @Input()\n  category: Category;\n\n  constructor() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".header {\n  color: #111b22;\n  padding: 45px 25px 25px;\n  height: 270px;\n\n  &__back {\n    font-size: 20px;\n  }\n\n  &__title {\n    font-size: 28px;\n    font-weight: 500;\n  }\n\n  &__description {\n    font-size: 14px;\n    line-height: 20px;\n  }\n}\n",
          "styleUrl": "./meditation-header.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 14
      },
      "templateData": "<div\n  class=\"header\"\n  fxLayout=\"column\"\n  fxLayoutAlign=\"space-between\"\n  fxLayoutGap=\"8px\"\n>\n  <div>\n    <ion-icon\n      name=\"arrow-back-outline\"\n      class=\"header__back\"\n      routerDirection=\"back\"\n      [routerLink]=\"['/meditation']\"\n    ></ion-icon>\n  </div>\n\n  <div fxLayoutAlign=\"space-between center\" fxLayoutGap=\"16px\">\n    <div fxLayout=\"column\" fxLayoutAlign=\"space-between\" fxLayoutGap=\"4px\">\n      <span class=\"header__title\">{{ category.name | titlecase }}</span>\n\n      <p class=\"header__description\">{{ category.description }}</p>\n    </div>\n\n    <img class=\"header__image\" [src]=\"category.imageUrl\" fxFlex=\"0 0 90px\" />\n  </div>\n</div>\n"
    },
    {
      "name": "MeditationItemComponent",
      "id": "component-MeditationItemComponent-b4928c907249abedadd2edf4d1f0340d",
      "file": "src/app/modules/meditation/components/meditation-item/meditation-item.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-meditation-item",
      "styleUrls": ["./meditation-item.component.scss"],
      "styles": [],
      "templateUrl": ["./meditation-item.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "meditation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "Meditation"
        }
      ],
      "outputsClass": [
        {
          "name": "selected",
          "defaultValue": "new EventEmitter<Meditation>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "content",
          "defaultValue": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\n\n// Models\nimport { content, Meditation } from '@meditation/models/meditation.model';\n\n@Component({\n  selector: 'app-meditation-item',\n  templateUrl: './meditation-item.component.html',\n  styleUrls: ['./meditation-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MeditationItemComponent {\n  content = content;\n\n  @Input()\n  meditation: Meditation;\n\n  @Output()\n  selected = new EventEmitter<Meditation>();\n\n  constructor() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".item {\n  color: #616469;\n  width: 100%;\n  --min-height: 60px;\n\n  &__title {\n    font-size: 14px;\n  }\n\n  &__icon {\n    font-size: 13px;\n  }\n}\n",
          "styleUrl": "./meditation-item.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 25
      },
      "templateData": "<ion-item (click)=\"selected.emit(meditation)\">\n  <div class=\"item\" fxLayoutAlign=\"space-between center\">\n    <span class=\"item__title\">{{ meditation.title | titlecase }}</span>\n\n    <div fxLayoutAlign=\"space-between center\" fxLayoutGap=\"8px\">\n      <ion-icon\n        class=\"item__icon\"\n        *ngIf=\"meditation[content.media]\"\n        name=\"musical-note-outline\"\n      ></ion-icon>\n\n      <ion-icon\n        class=\"item__icon\"\n        *ngIf=\"meditation.text\"\n        name=\"document-text-outline\"\n      ></ion-icon>\n    </div>\n  </div>\n</ion-item>\n"
    },
    {
      "name": "MeditationModalComponent",
      "id": "component-MeditationModalComponent-2f96db5522ac9f3ec9b3b24b3edce103",
      "file": "src/app/modules/meditation/components/meditation-modal/meditation-modal.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-meditation-modal",
      "styleUrls": ["./meditation-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./meditation-modal.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "meditation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "Meditation"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "$seekbarValue",
          "defaultValue": "this.stateService.$media.pipe(\n    pluck('timeSec'),\n    filter((value) => value !== undefined),\n    map((value: number) => Math.floor(value)),\n    distinctUntilChanged(),\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<number>",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "content",
          "defaultValue": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "mediaOptions",
          "defaultValue": "[content.media, content.text]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ContentTypes[]",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "mediaSelection",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ContentTypes[]",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "modalController",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ModalController",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [123]
        },
        {
          "name": "stateService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "AudioStateService",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "dismissModal",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onMediaSelectionChange",
          "args": [
            {
              "name": "contents",
              "type": "ContentTypes[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "contents",
              "type": "ContentTypes[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onPause",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onPlay",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSeekEnd",
          "args": [
            {
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport { ModalController } from '@ionic/angular';\n\nimport { distinctUntilChanged, filter, map, pluck } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n// Services\nimport { AudioStateService } from '@meditation/services/audio-state.service';\nimport { AudioService } from '@meditation/services/audio.service';\n\n// Models\nimport {\n  Meditation,\n  content,\n  ContentTypes,\n} from '@meditation/models/meditation.model';\n\n@Component({\n  selector: 'app-meditation-modal',\n  templateUrl: './meditation-modal.component.html',\n  styleUrls: ['./meditation-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MeditationModalComponent implements OnInit, OnDestroy {\n  content = content;\n\n  @Input()\n  meditation: Meditation;\n\n  mediaOptions: ContentTypes[] = [content.media, content.text];\n  mediaSelection: ContentTypes[];\n\n  $seekbarValue: Observable<number> = this.stateService.$media.pipe(\n    pluck('timeSec'),\n    filter((value) => value !== undefined),\n    map((value: number) => Math.floor(value)),\n    distinctUntilChanged(),\n  );\n\n  get showButtons(): boolean {\n    return !!(\n      this.meditation[content.text] &&\n      (this.meditation[content.media] || this.meditation.imageUrl)\n    );\n  }\n\n  constructor(\n    public modalController: ModalController,\n    public stateService: AudioStateService,\n    private audioService: AudioService,\n  ) {}\n\n  ngOnInit() {\n    this.mediaSelection =\n      this.meditation.media || this.meditation.imageUrl\n        ? [content.media]\n        : [content.text];\n  }\n\n  onMediaSelectionChange(contents: ContentTypes[]): void {\n    this.mediaSelection = contents;\n\n    if (contents[0] === content.text) {\n      this.audioService.pause();\n    }\n  }\n\n  onPlay(): void {\n    if (this.stateService.media.mediaType) {\n      this.audioService.play();\n    } else {\n      this.audioService.initializeStream(this.meditation.media);\n    }\n  }\n\n  onPause(): void {\n    this.audioService.pause();\n  }\n\n  onSeekEnd({ target }): void {\n    this.audioService.seekTo(target.value);\n\n    if (this.stateService.media.playing) {\n      this.onPlay();\n    }\n  }\n\n  dismissModal(): void {\n    this.modalController.dismiss();\n    this.stateService.reset();\n  }\n\n  ngOnDestroy(): void {\n    this.stateService.reset();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".header {\n  &__back {\n    font-size: 25px;\n    color: #808289;\n    margin-left: 12px;\n    margin-top: 12px;\n  }\n\n  &__title {\n    margin: 0px 25px 8px;\n    text-align: center;\n    color: #1f1f1f;\n  }\n}\n\nion-toolbar {\n  --background: #e7f4fd;\n}\n",
          "styleUrl": "./meditation-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "stateService",
            "type": "AudioStateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "audioService",
            "type": "AudioService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 52,
        "jsdoctags": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "stateService",
            "type": "AudioStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "audioService",
            "type": "AudioService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "accessors": {
        "showButtons": {
          "name": "showButtons",
          "getSignature": {
            "name": "showButtons",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        }
      },
      "templateData": "<ion-header class=\"header\">\n  <ion-toolbar>\n    <ion-icon\n      class=\"header__back\"\n      name=\"close-outline\"\n      (click)=\"dismissModal()\"\n    ></ion-icon>\n    <h4 class=\"header__title\">{{ meditation.title }}</h4>\n\n    <div fxLayoutAlign=\"center\">\n      <app-buttons-select\n        [options]=\"mediaOptions\"\n        [value]=\"mediaSelection\"\n        (valueChange)=\"onMediaSelectionChange($event)\"\n        *ngIf=\"showButtons\"\n      ></app-buttons-select>\n    </div>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <app-media-content\n    [hidden]=\"mediaSelection.includes(content.text)\"\n    [meditation]=\"meditation\"\n    [seekbarValue]=\"$seekbarValue | async\"\n    [media]=\"stateService.$media | async\"\n    (playAudio)=\"onPlay()\"\n    (pauseAudio)=\"onPause()\"\n    (seekEnd)=\"onSeekEnd($event)\"\n  ></app-media-content>\n\n  <app-text-content\n    [hidden]=\"mediaSelection.includes(content.media)\"\n    [text]=\"meditation.text\"\n  ></app-text-content>\n</ion-content>\n"
    },
    {
      "name": "MeditationsComponent",
      "id": "component-MeditationsComponent-8c1ab21b7ceb395902db614a3e350004",
      "file": "src/app/modules/meditation/pages/meditations/meditations.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-meditations",
      "styleUrls": ["./meditations.component.scss"],
      "styles": [],
      "templateUrl": ["./meditations.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "$category",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<Category>",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "$mediaSelection",
          "defaultValue": "new BehaviorSubject<ContentTypes[]>([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "$meditations",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<Meditation[]>",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "mediaOptions",
          "defaultValue": "[content.media, content.text]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 33
        }
      ],
      "methodsClass": [
        {
          "name": "filterMeditations",
          "args": [
            {
              "name": "meditations",
              "type": "Meditation[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "selectedMedia",
              "type": "ContentTypes[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Meditation[]",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "meditations",
              "type": "Meditation[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "selectedMedia",
              "type": "ContentTypes[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "presentModal",
          "args": [
            {
              "name": "meditation",
              "type": "Meditation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130],
          "jsdoctags": [
            {
              "name": "meditation",
              "type": "Meditation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { ModalController } from '@ionic/angular';\n\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Store } from '@ngrx/store';\n\n// Models\nimport {\n  Meditation,\n  content,\n  ContentTypes,\n} from '@meditation/models/meditation.model';\nimport { Category } from '@meditation/models/category.model';\n\n// Components\nimport { MeditationModalComponent } from '@meditation/components/meditation-modal/meditation-modal.component';\n\n// Selectors\nimport { selectMeditationsByCategoryId } from '@meditation/store/selectors/meditation.selector';\nimport { selectCategoryById } from '@meditation/store/selectors/meditation.selector';\n\n@Component({\n  selector: 'app-meditations',\n  templateUrl: './meditations.component.html',\n  styleUrls: ['./meditations.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MeditationsComponent implements OnInit {\n  mediaOptions = [content.media, content.text];\n\n  $mediaSelection = new BehaviorSubject<ContentTypes[]>([]);\n  $category: Observable<Category>;\n  $meditations: Observable<Meditation[]>;\n\n  constructor(\n    private modalController: ModalController,\n    private route: ActivatedRoute,\n    private store: Store,\n  ) {}\n\n  ngOnInit(): void {\n    const { categoryId } = this.route.snapshot.queryParams;\n\n    this.$category = this.store.select(selectCategoryById(categoryId));\n\n    this.$meditations = combineLatest([\n      this.store\n        .select(selectMeditationsByCategoryId(categoryId))\n        .pipe(filter((meditations) => meditations !== null)),\n      this.$mediaSelection,\n    ]).pipe(\n      map(([meditations, selectedMedia]: [Meditation[], ContentTypes[]]) =>\n        this.filterMeditations(meditations, selectedMedia),\n      ),\n    );\n  }\n\n  async presentModal(meditation: Meditation): Promise<void> {\n    const modal = await this.modalController.create({\n      component: MeditationModalComponent,\n      componentProps: { meditation },\n    });\n\n    await modal.present();\n  }\n\n  private filterMeditations(\n    meditations: Meditation[],\n    selectedMedia: ContentTypes[],\n  ): Meditation[] {\n    return meditations.filter((meditation: Meditation) => {\n      for (const media of selectedMedia) {\n        if (meditation[media] === undefined || meditation[media] === null) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "ion-header {\n  background: #f9eedb;\n}\n",
          "styleUrl": "./meditations.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<ion-header>\n  <app-meditation-header [category]=\"$category | async\"></app-meditation-header>\n\n  <div fxLayoutAlign=\"center\">\n    <app-buttons-select\n      [multiple]=\"true\"\n      [options]=\"mediaOptions\"\n      [value]=\"$mediaSelection | async\"\n      (valueChange)=\"$mediaSelection.next($event)\"\n    ></app-buttons-select>\n  </div>\n</ion-header>\n\n<ion-content forceOverscroll>\n  <ion-list lines=\"full\">\n    <app-meditation-item\n      *ngFor=\"let meditation of $meditations | async\"\n      [meditation]=\"meditation\"\n      (selected)=\"presentModal($event)\"\n    ></app-meditation-item>\n  </ion-list>\n</ion-content>\n"
    },
    {
      "name": "StatsComponent",
      "id": "component-StatsComponent-b41bc41e0d0f1b1c2d1c4ae5b0c64651",
      "file": "src/app/modules/timer/pages/stats/stats.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-stats",
      "styleUrls": ["./stats.component.scss"],
      "styles": [],
      "templateUrl": ["./stats.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-stats',\n  templateUrl: './stats.component.html',\n  styleUrls: ['./stats.component.scss'],\n})\nexport class StatsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./stats.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<p>stats works!</p>\n"
    },
    {
      "name": "TextContentComponent",
      "id": "component-TextContentComponent-af82bf5681f48358bba3c6d435aec75f",
      "file": "src/app/modules/meditation/components/text-content/text-content.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-text-content",
      "styleUrls": ["./text-content.component.scss"],
      "styles": [],
      "templateUrl": ["./text-content.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-text-content',\n  templateUrl: './text-content.component.html',\n  styleUrls: ['./text-content.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextContentComponent {\n  @Input()\n  text: string;\n\n  constructor() {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".text {\n  padding: 16px 32px;\n  color: #1f1f1f;\n\n  &__content {\n    text-align: justify;\n    font-size: 14px;\n    line-height: 19px;\n  }\n}\n",
          "styleUrl": "./text-content.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 11
      },
      "templateData": "<div class=\"text\">\n  <p class=\"text__content\">{{ text }}</p>\n</div>\n"
    },
    {
      "name": "TimerComponent",
      "id": "component-TimerComponent-74bd84a721533be2f9e31cccb50d2744",
      "file": "src/app/modules/timer/pages/timer/timer.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-timer",
      "styleUrls": ["./timer.component.scss"],
      "styles": [],
      "templateUrl": ["./timer.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "duration",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 18
        }
      ],
      "methodsClass": [
        {
          "name": "onDurationChange",
          "args": [
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "duration",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "presentModal",
          "args": [],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { ModalController } from '@ionic/angular';\n\n// Components\nimport { TimerModalComponent } from '@timer/components/timer-modal/timer-modal.component';\n\n// Constants\nimport { DEFAULT_DURATION_SECONDS } from '@timer/models/timer.model';\n\n@Component({\n  selector: 'app-timer',\n  templateUrl: './timer.component.html',\n  styleUrls: ['./timer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimerComponent {\n  duration: number;\n\n  constructor(private modalController: ModalController) {}\n\n  onDurationChange(duration: number): void {\n    this.duration = duration;\n  }\n\n  async presentModal(): Promise<void> {\n    const duration = this.duration || DEFAULT_DURATION_SECONDS;\n\n    const modal = await this.modalController.create({\n      component: TimerModalComponent,\n      componentProps: { duration },\n    });\n\n    // TODO\n    modal.onDidDismiss().then((data) => {\n      console.log('time:', data.data?.time);\n    });\n\n    await modal.present();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".timer {\n  height: 100%;\n  background: url('../../../../../assets/images/mountains.jpg');\n  background-size: cover;\n\n  &__start {\n    color: #fff;\n    width: 60px;\n    height: 60px;\n    background-color: #4e6b8c;\n    border-radius: 50%;\n  }\n}\n",
          "styleUrl": "./timer.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div\n  class=\"timer\"\n  fxLayout=\"column\"\n  fxLayoutAlign=\"center center\"\n  fxLayoutGap=\"128px\"\n>\n  <app-timer-duration\n    (durationChange)=\"onDurationChange($event)\"\n  ></app-timer-duration>\n  <div\n    class=\"timer__start\"\n    fxLayoutAlign=\"center center\"\n    (click)=\"presentModal()\"\n  >\n    Start\n  </div>\n</div>\n"
    },
    {
      "name": "TimerContainerComponent",
      "id": "component-TimerContainerComponent-921205abb2d74a00bf66ef68233dc7f6",
      "file": "src/app/modules/timer/pages/timer-container/timer-container.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-timer-container",
      "styleUrls": ["./timer-container.component.scss"],
      "styles": [],
      "templateUrl": ["./timer-container.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "menuSelection",
          "defaultValue": "[timer.timer]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TimerMenu[]",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "timer",
          "defaultValue": "timer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "timerMenu",
          "defaultValue": "[timer.timer, timer.stats]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TimerMenu[]",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "methodsClass": [
        {
          "name": "onMenuSelectionChange",
          "args": [
            {
              "name": "selection",
              "type": "TimerMenu",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "selection",
              "type": "TimerMenu",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n// Models\nimport { timer } from '@timer/models/timer.model';\nimport { TimerMenu } from '@timer/models/timer.model';\n\n@Component({\n  selector: 'app-timer-container',\n  templateUrl: './timer-container.component.html',\n  styleUrls: ['./timer-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimerContainerComponent {\n  timer = timer;\n\n  timerMenu: TimerMenu[] = [timer.timer, timer.stats];\n  menuSelection: TimerMenu[] = [timer.timer];\n\n  constructor(private router: Router) {}\n\n  onMenuSelectionChange(selection: TimerMenu) {\n    this.router.navigate(['timer', selection]);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "ion-toolbar {\n  --background: #e7f4fd;\n}\n",
          "styleUrl": "./timer-container.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<ion-header class=\"header\">\n  <ion-toolbar>\n    <div fxLayoutAlign=\"center\">\n      <app-buttons-select\n        [options]=\"timerMenu\"\n        [value]=\"menuSelection\"\n        (valueChange)=\"onMenuSelectionChange($event[0])\"\n      ></app-buttons-select>\n    </div>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <router-outlet></router-outlet>\n</ion-content>\n"
    },
    {
      "name": "TimerDurationComponent",
      "id": "component-TimerDurationComponent-bb7e636ffafb8207544d2cbce1da5e03",
      "file": "src/app/modules/timer/components/timer-duration/timer-duration.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-timer-duration",
      "styleUrls": ["./timer-duration.component.scss"],
      "styles": [],
      "templateUrl": ["./timer-duration.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "durationChange",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "defaultDurationMinutes",
          "defaultValue": "DEFAULT_DURATION_SECONDS / 60",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21
        }
      ],
      "methodsClass": [
        {
          "name": "onChange",
          "args": [
            {
              "name": "event",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Output,\n} from '@angular/core';\n\n// Constants\nimport { DEFAULT_DURATION_SECONDS } from '@timer/models/timer.model';\n\n@Component({\n  selector: 'app-timer-duration',\n  templateUrl: './timer-duration.component.html',\n  styleUrls: ['./timer-duration.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimerDurationComponent {\n  @Output()\n  durationChange = new EventEmitter<number>();\n\n  defaultDurationMinutes = DEFAULT_DURATION_SECONDS / 60;\n\n  constructor() {}\n\n  onChange(event): void {\n    this.durationChange.emit(event.detail.value * 60);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "ion-input {\n  --background: #4e6b8c;\n  color: #fff;\n  width: 40px;\n}\n",
          "styleUrl": "./timer-duration.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 21
      },
      "templateData": "<div class=\"duration\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"16px\">\n  <ion-label fxFlexAlign=\"center\" class=\"duration__label\">Duration</ion-label>\n  <ion-input\n    (ionChange)=\"onChange($event)\"\n    [value]=\"defaultDurationMinutes\"\n    type=\"number\"\n  ></ion-input>\n</div>\n"
    },
    {
      "name": "TimerModalComponent",
      "id": "component-TimerModalComponent-4c550592480b865a179d204309febd97",
      "file": "src/app/modules/timer/components/timer-modal/timer-modal.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-timer-modal",
      "styleUrls": ["./timer-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./timer-modal.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "duration",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "$active",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<boolean>",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "$currentTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<number>",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "methodsClass": [
        {
          "name": "discard",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "finish",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "pause",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "start",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ModalController } from '@ionic/angular';\n\nimport { interval, BehaviorSubject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-timer-modal',\n  templateUrl: './timer-modal.component.html',\n  styleUrls: ['./timer-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TimerModalComponent implements OnInit, OnDestroy {\n  // data\n  @Input()\n  duration: number;\n\n  // state\n  $currentTime: BehaviorSubject<number>;\n  $active: BehaviorSubject<boolean>;\n\n  constructor(private modalController: ModalController) {}\n\n  ngOnInit(): void {\n    this.$currentTime = new BehaviorSubject(this.duration);\n    this.$active = new BehaviorSubject(false);\n\n    this.start();\n  }\n\n  start(): void {\n    this.$active.next(true);\n    interval(1000)\n      .pipe(takeUntil(this.$active.pipe(filter((active: boolean) => !active))))\n      .subscribe(() => {\n        this.$currentTime.next(this.$currentTime.value - 1);\n\n        if (this.$currentTime.value === 0) {\n          this.$active.next(false);\n        }\n      });\n  }\n\n  pause(): void {\n    this.$active.next(false);\n  }\n\n  finish(): void {\n    const time = this.duration - this.$currentTime.value;\n\n    this.modalController.dismiss({ time });\n  }\n\n  discard(): void {\n    this.modalController.dismiss();\n  }\n\n  ngOnDestroy(): void {\n    this.$active.next(false);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".modal {\n  height: 100%;\n  margin: 16px 0 64px;\n}\n\n.title {\n  font-weight: bold;\n}\n\n.time {\n  font-size: 90px;\n  padding-top: 80px;\n}\n\n.actions {\n  height: 180px;\n\n  &__run {\n    width: 50px;\n    height: 50px;\n    background-color: #4e6b8c;\n    border-radius: 50%;\n    margin-top: 32px;\n  }\n\n  &__icon {\n    --ionicon-stroke-width: 11px;\n    font-size: 25px;\n    color: #fff;\n  }\n}\n",
          "styleUrl": "./timer-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "modalController",
            "type": "ModalController",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<div class=\"modal\" fxLayout=\"column\" fxLayoutAlign=\"space-between center\">\n  <p class=\"title\">Meditation</p>\n\n  <p class=\"time\">{{ ($currentTime | async) * 1000 | date: 'mm:ss' }}</p>\n\n  <div class=\"actions\" fxLayout=\"column\" fxLayoutAlign=\"flex-end center\">\n    <div class=\"actions__finish\" *ngIf=\"($active | async) === false\">\n      <ion-button expand=\"block\" color=\"medium\" (click)=\"discard()\"\n        >discard session</ion-button\n      >\n      <ion-button expand=\"block\" color=\"medium\" (click)=\"finish()\"\n        >finish</ion-button\n      >\n    </div>\n\n    <div class=\"actions__run\" fxLayoutAlign=\"center center\">\n      <ion-icon\n        class=\"actions__icon\"\n        name=\"play\"\n        *ngIf=\"($active | async) === false\"\n        (click)=\"start()\"\n      ></ion-icon>\n\n      <ion-icon\n        class=\"actions__icon\"\n        name=\"pause\"\n        *ngIf=\"$active | async\"\n        (click)=\"pause()\"\n      ></ion-icon>\n    </div>\n  </div>\n</div>\n"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "id": "module-AppModule-e8d67e451513fb6688addd8d0657116f",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app.module.ts",
      "methods": [],
      "sourceCode": "import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { AngularFirestoreModule } from '@angular/fire/compat/firestore';\nimport { AngularFireModule } from '@angular/fire/compat';\n\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\n\n// Routes\nimport { AppRoutingModule } from 'app/app-routing.module';\n\n// Components\nimport { AppComponent } from 'app/app.component';\n\n// Environment\nimport { environment } from '@environments/environment';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    IonicModule.forRoot(),\n    // firebase\n    AngularFireModule.initializeApp(environment.firebase),\n    AngularFirestoreModule,\n    // store\n    StoreModule.forRoot({}, {}),\n    EffectsModule.forRoot([]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production,\n    }),\n  ],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRoutingModule",
      "id": "module-AppRoutingModule-260d1b7fdf4fd66b0f60f5bedfe3a5a8",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app-routing.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  {\n    path: 'home',\n    loadChildren: () =>\n      \"import('./modules/home/home.module').then((m) => m.HomeModule)\",\n  },\n  {\n    path: 'meditation',\n    loadChildren: () =>\n      \"import('./modules/meditation/meditation.module').then(\\\n        (m) => m.MeditationModule,\\\n      )\",\n  },\n  {\n    path: 'timer',\n    loadChildren: () =>\n      \"import('./modules/timer/timer.module').then((m) => m.TimerModule)\",\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ButtonsSelectModule",
      "id": "module-ButtonsSelectModule-de209a819b16cd7df9b724e265446b89",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/common/ui-lib/buttons-select/buttons-select.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n// Components\nimport { ButtonsSelectComponent } from '@buttons-select/components/buttons-select.component';\n\n@NgModule({\n  declarations: [ButtonsSelectComponent],\n  imports: [CommonModule, FlexLayoutModule],\n  exports: [ButtonsSelectComponent],\n})\nexport class ButtonsSelectModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ButtonsSelectComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ButtonsSelectComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "HomeModule",
      "id": "module-HomeModule-bd1afc195077e764e59f367493086729",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/modules/home/home.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { IonicModule } from '@ionic/angular';\n\n// Routes\nimport { HomePageRoutingModule } from '@home/home-routing.module';\n\n// Components\nimport { HomeComponent } from '@home/pages/home/home.component';\n\n// Services\nimport { QuoteService } from '@home/services/quote.service';\n\n// Store\nimport { homeFeatureKey, reducers } from '@home/store/reducers/home.state';\nimport { QuoteLoadEffect } from '@home/store/effects/quote-load.effect';\n\n@NgModule({\n  declarations: [HomeComponent],\n  providers: [QuoteService],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    HomePageRoutingModule,\n    FlexLayoutModule,\n    // store\n    StoreModule.forFeature(homeFeatureKey, reducers),\n    EffectsModule.forFeature([QuoteLoadEffect]),\n  ],\n})\nexport class HomeModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "QuoteService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "HomeComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "HomePageRoutingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "HomePageRoutingModule",
      "id": "module-HomePageRoutingModule-121172ad7091b72fc981e4dba252d196",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/modules/home/home-routing.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n// Components\nimport { HomeComponent } from '@home/pages/home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HomePageRoutingModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "MeditationModule",
      "id": "module-MeditationModule-e37a44727e05940a027feb9aa8b6b00b",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/modules/meditation/meditation.module.ts",
      "methods": [],
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\n// Modules\nimport { MeditationRoutingModule } from '@meditation/meditation-routing.module';\nimport { ButtonsSelectModule } from '@buttons-select/buttons-select.module';\n\n// Services\nimport { AudioService } from '@meditation/services/audio.service';\nimport { AudioStateService } from '@meditation/services/audio-state.service';\nimport { MeditationsService } from '@meditation/services/meditations.service';\n\n// Components\nimport { MeditationModalComponent } from '@meditation/components/meditation-modal/meditation-modal.component';\nimport { TextContentComponent } from '@meditation/components/text-content/text-content.component';\nimport { MediaContentComponent } from '@meditation/components/media-content/media-content.component';\nimport { CategoryCardComponent } from '@meditation/components/category-card/category-card.component';\nimport { CategoriesComponent } from '@meditation/pages/categories/categories.component';\nimport { MeditationsComponent } from '@meditation/pages/meditations/meditations.component';\nimport { MeditationHeaderComponent } from '@meditation/components/meditation-header/meditation-header.component';\nimport { MeditationItemComponent } from '@meditation/components/meditation-item/meditation-item.component';\n\n// Store\nimport {\n  meditationFeatureKey,\n  reducers,\n} from '@meditation/store/reducers/meditation.state';\n\n// Effects\nimport { MeditationsLoadEffect } from '@meditation/store/effects/meditations-load.effect';\nimport { CategoriesLoadEffect } from '@meditation/store/effects/categories-load.effect';\n\n// Guards\nimport { CategoriesGuard } from '@meditation/guards/categories.guard';\nimport { MeditationsGuard } from '@meditation/guards/meditations.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MeditationRoutingModule,\n    ButtonsSelectModule,\n    FlexLayoutModule,\n    // store\n    StoreModule.forFeature(meditationFeatureKey, reducers),\n    EffectsModule.forFeature([MeditationsLoadEffect, CategoriesLoadEffect]),\n  ],\n  declarations: [\n    MeditationsComponent,\n    CategoriesComponent,\n    MediaContentComponent,\n    TextContentComponent,\n    MeditationModalComponent,\n    CategoryCardComponent,\n    MeditationHeaderComponent,\n    MeditationItemComponent,\n  ],\n  providers: [\n    AudioService,\n    AudioStateService,\n    MeditationsService,\n    MeditationsGuard,\n    CategoriesGuard,\n  ],\n})\nexport class MeditationModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "AudioService"
            },
            {
              "name": "AudioStateService"
            },
            {
              "name": "MeditationsService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "CategoriesComponent"
            },
            {
              "name": "CategoryCardComponent"
            },
            {
              "name": "MediaContentComponent"
            },
            {
              "name": "MeditationHeaderComponent"
            },
            {
              "name": "MeditationItemComponent"
            },
            {
              "name": "MeditationModalComponent"
            },
            {
              "name": "MeditationsComponent"
            },
            {
              "name": "TextContentComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ButtonsSelectModule"
            },
            {
              "name": "MeditationRoutingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "MeditationRoutingModule",
      "id": "module-MeditationRoutingModule-424c158ca158e46aa0966dc0b8f708c0",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/modules/meditation/meditation-routing.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\n// Components\nimport { CategoriesComponent } from '@meditation/pages/categories/categories.component';\nimport { MeditationsComponent } from '@meditation/pages/meditations/meditations.component';\n\n// Guards\nimport { CategoriesGuard } from '@meditation/guards/categories.guard';\nimport { MeditationsGuard } from '@meditation/guards/meditations.guard';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'categories', pathMatch: 'full' },\n  {\n    path: 'categories',\n    component: CategoriesComponent,\n    canActivate: [CategoriesGuard],\n  },\n  {\n    path: 'meditations',\n    component: MeditationsComponent,\n    canActivate: [MeditationsGuard],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MeditationRoutingModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TimerModule",
      "id": "module-TimerModule-12df9be3cb1113acd16a8346dd23d9a0",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/modules/timer/timer.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { IonicModule } from '@ionic/angular';\n\n// Modules\nimport { TimerRoutingModule } from '@timer/timer-routing.module';\nimport { ButtonsSelectModule } from '@buttons-select/buttons-select.module';\n\n// Components\nimport { TimerContainerComponent } from '@timer/pages/timer-container/timer-container.component';\nimport { TimerDurationComponent } from '@timer/components/timer-duration/timer-duration.component';\nimport { TimerModalComponent } from '@timer/components/timer-modal/timer-modal.component';\nimport { TimerComponent } from '@timer/pages/timer/timer.component';\n\n@NgModule({\n  declarations: [\n    TimerContainerComponent,\n    TimerComponent,\n    TimerDurationComponent,\n    TimerModalComponent,\n  ],\n  imports: [\n    CommonModule,\n    TimerRoutingModule,\n    ButtonsSelectModule,\n    IonicModule,\n    FlexLayoutModule,\n  ],\n})\nexport class TimerModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TimerComponent"
            },
            {
              "name": "TimerContainerComponent"
            },
            {
              "name": "TimerDurationComponent"
            },
            {
              "name": "TimerModalComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ButtonsSelectModule"
            },
            {
              "name": "TimerRoutingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TimerRoutingModule",
      "id": "module-TimerRoutingModule-fe1b4ad3fe591ebbe64fe3cf4a712e51",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/modules/timer/timer-routing.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\n// Components\nimport { TimerContainerComponent } from '@timer/pages/timer-container/timer-container.component';\nimport { StatsComponent } from '@timer/pages/stats/stats.component';\nimport { TimerComponent } from '@timer/pages/timer/timer.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TimerContainerComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: 'play',\n        pathMatch: 'full',\n      },\n      {\n        path: 'play',\n        component: TimerComponent,\n      },\n      {\n        path: 'stats',\n        component: StatsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TimerRoutingModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "categoriesData",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: MeditationState) => state.categories"
      },
      {
        "name": "categoriesErrorState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: MeditationState) =>\n  state.isCategoriesError"
      },
      {
        "name": "categoriesLoadedState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: MeditationState) =>\n  state.isCategoriesLoaded"
      },
      {
        "name": "categoriesLoadingState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: MeditationState) =>\n  state.isCategoriesLoading"
      },
      {
        "name": "categoryMock",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/mocks/category.mock.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Category",
        "defaultValue": "{\n  id: 'categoryId',\n  name: 'Category Name',\n  description: 'Category Description',\n  imageUrl: 'http://domain.com',\n}"
      },
      {
        "name": "content",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/models/meditation.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "{\n  media: 'media',\n  text: 'text',\n} as const"
      },
      {
        "name": "DEFAULT_DURATION_SECONDS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/timer/models/timer.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "number",
        "defaultValue": "900"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: true,\n  firebase: {\n    apiKey: 'AIzaSyA02Y_nQiILEC4-TR_cw1hCBFAy3Uzw78I',\n    authDomain: 'meditify-5cd18.firebaseapp.com',\n    databaseURL: 'https://meditify-5cd18.firebaseio.com',\n    projectId: 'meditify-5cd18',\n    storageBucket: 'meditify-5cd18.appspot.com',\n    messagingSenderId: '661526611463',\n    appId: '1:661526611463:web:ad4d2587d5cc613fab8ca2',\n  },\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyA02Y_nQiILEC4-TR_cw1hCBFAy3Uzw78I',\n    authDomain: 'meditify-5cd18.firebaseapp.com',\n    databaseURL: 'https://meditify-5cd18.firebaseio.com',\n    projectId: 'meditify-5cd18',\n    storageBucket: 'meditify-5cd18.appspot.com',\n    messagingSenderId: '661526611463',\n    appId: '1:661526611463:web:ad4d2587d5cc613fab8ca2',\n  },\n}"
      },
      {
        "name": "formatTime",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/utils/time.utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(time: number, format: string): string =>\n  dayjs(time * 1000).format(format)"
      },
      {
        "name": "homeFeatureKey",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'home'"
      },
      {
        "name": "homeReducer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createReducer(\n  initialState,\n\n  on(\n    loadQuote,\n    (state): HomeState => ({\n      ...state,\n      isQuoteLoading: true,\n      isQuoteLoaded: false,\n      isQuoteError: false,\n    }),\n  ),\n\n  on(\n    loadQuoteFailure,\n    (state): HomeState => ({\n      ...state,\n      isQuoteLoading: false,\n      isQuoteLoaded: false,\n      isQuoteError: true,\n    }),\n  ),\n\n  on(\n    loadQuoteSuccess,\n    (state, { quote }): HomeState => ({\n      ...state,\n      quote,\n      isQuoteLoading: false,\n      isQuoteLoaded: true,\n      isQuoteError: false,\n    }),\n  ),\n)"
      },
      {
        "name": "INITIAL_MEDIA_STATE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/constants/media.constants.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  canPlay: false,\n  duration: '00:00',\n  durationSec: 0,\n  time: '00:00',\n  timeSec: 0,\n  mediaType: '',\n  loadStart: false,\n  playing: false,\n}"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "HomeState",
        "defaultValue": "{\n  // data\n  quote: null,\n  // state\n  isQuoteLoading: false,\n  isQuoteLoaded: false,\n  isQuoteError: false,\n}"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "MeditationState",
        "defaultValue": "{\n  // data\n  meditations: null,\n  categories: null,\n  // state\n  isCategoriesLoading: false,\n  isCategoriesLoaded: false,\n  isCategoriesError: false,\n  isMeditationsLoading: false,\n  isMeditationsLoaded: false,\n  isMeditationsError: false,\n}"
      },
      {
        "name": "loadCategories",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createAction(\n  '[Meditation | Categories Page] Load Categories',\n)"
      },
      {
        "name": "loadCategoriesFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createAction(\n  '[Meditation | API] Load Categories Failure',\n  props<{ error: any }>(),\n)"
      },
      {
        "name": "loadCategoriesSuccess",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createAction(\n  '[Meditation | API] Load Categories Success',\n  props<{ categories: Category[] }>(),\n)"
      },
      {
        "name": "loadMeditations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createAction(\n  '[Meditation | Meditations Page] Load Meditations',\n)"
      },
      {
        "name": "loadMeditationsFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createAction(\n  '[Meditation | API] Load Meditations Failure',\n  props<{ error: any }>(),\n)"
      },
      {
        "name": "loadMeditationsSuccess",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createAction(\n  '[Meditation | API] Load Meditations Success',\n  props<{ meditations: Meditation[] }>(),\n)"
      },
      {
        "name": "loadQuote",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/actions/home.actions.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createAction('[Home | Effects Init] Load Quote')"
      },
      {
        "name": "loadQuoteFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/actions/home.actions.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createAction(\n  '[Home | API] Load Quote Failure',\n  props<{ error: any }>(),\n)"
      },
      {
        "name": "loadQuoteSuccess",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/actions/home.actions.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createAction(\n  '[Home | API] Load Quote Success',\n  props<{ quote: string }>(),\n)"
      },
      {
        "name": "meditationFeatureKey",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'meditation'"
      },
      {
        "name": "meditationMock",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/mocks/meditation.mock.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meditation",
        "defaultValue": "{\n  id: 'id',\n  categoryId: 'categoryId',\n  title: 'Meditation title',\n  text: `\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempo\n  r incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis \n  nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\n  eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, s\n  unt in culpa qui officia deserunt mollit anim id est laborum.\n  `,\n  media: 'https://domain.com',\n  imageUrl: 'https://picsum.photos/seed/picsum/400/600',\n}"
      },
      {
        "name": "meditationReducer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createReducer(\n  initialState,\n\n  on(\n    loadCategories,\n    (state): MeditationState => ({\n      ...state,\n      isCategoriesLoading: true,\n      isCategoriesLoaded: false,\n      isCategoriesError: false,\n    }),\n  ),\n\n  on(\n    loadCategoriesFailure,\n    (state): MeditationState => ({\n      ...state,\n      isCategoriesLoading: false,\n      isCategoriesLoaded: false,\n      isCategoriesError: true,\n    }),\n  ),\n\n  on(\n    loadCategoriesSuccess,\n    (state, { categories }): MeditationState => ({\n      ...state,\n      categories,\n      isCategoriesLoading: false,\n      isCategoriesLoaded: true,\n      isCategoriesError: false,\n    }),\n  ),\n\n  on(\n    loadMeditations,\n    (state): MeditationState => ({\n      ...state,\n      isMeditationsLoading: true,\n      isMeditationsLoaded: false,\n      isMeditationsError: false,\n    }),\n  ),\n\n  on(\n    loadMeditationsFailure,\n    (state): MeditationState => ({\n      ...state,\n      isMeditationsLoading: false,\n      isMeditationsLoaded: false,\n      isMeditationsError: true,\n    }),\n  ),\n\n  on(\n    loadMeditationsSuccess,\n    (state, { meditations }): MeditationState => ({\n      ...state,\n      meditations,\n      isMeditationsLoading: false,\n      isMeditationsLoaded: true,\n      isMeditationsError: false,\n    }),\n  ),\n)"
      },
      {
        "name": "meditationsData",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: MeditationState) => state.meditations"
      },
      {
        "name": "meditationsErrorState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: MeditationState) =>\n  state.isMeditationsError"
      },
      {
        "name": "meditationsLoadedState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: MeditationState) =>\n  state.isMeditationsLoaded"
      },
      {
        "name": "meditationsLoadingState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: MeditationState) =>\n  state.isMeditationsLoading"
      },
      {
        "name": "quoteData",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: HomeState) => state.quote"
      },
      {
        "name": "quoteErrorState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: HomeState) => state.isQuoteError"
      },
      {
        "name": "quoteLoadedState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: HomeState) => state.isQuoteLoaded"
      },
      {
        "name": "quoteLoadingState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: HomeState) => state.isQuoteLoading"
      },
      {
        "name": "quoteMock",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/mocks/quote.mock.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Quote",
        "defaultValue": "{\n  content: 'Test quote',\n  current: true,\n}"
      },
      {
        "name": "reducer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: HomeState | undefined, action: Action) =>\n  homeReducer(state, action)"
      },
      {
        "name": "reducer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(state: MeditationState | undefined, action: Action) =>\n  meditationReducer(state, action)"
      },
      {
        "name": "reducers",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  home: reducer,\n}"
      },
      {
        "name": "reducers",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  meditation: reducer,\n}"
      },
      {
        "name": "selectCategories",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectMeditationState,\n  categoriesData,\n)"
      },
      {
        "name": "selectCategoriesHasError",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectMeditationState,\n  categoriesErrorState,\n)"
      },
      {
        "name": "selectCategoryById",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(categoryId: string) =>\n  createSelector(\n    selectCategories,\n    (categories: Category[]) =>\n      categories &&\n      categories.find((category: Category) => category.id === categoryId),\n  )"
      },
      {
        "name": "selectHomeModuleState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/reducers/home.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createFeatureSelector<HomeModuleState>(homeFeatureKey)"
      },
      {
        "name": "selectHomeState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/selectors/home.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectHomeModuleState,\n  (state: HomeModuleState) => state.home,\n)"
      },
      {
        "name": "selectIsCategoriesLoaded",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectMeditationState,\n  categoriesLoadedState,\n)"
      },
      {
        "name": "selectIsCategoriesLoading",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectMeditationState,\n  categoriesLoadingState,\n)"
      },
      {
        "name": "selectIsMeditationsLoaded",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectMeditationState,\n  meditationsLoadedState,\n)"
      },
      {
        "name": "selectIsMeditationsLoading",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectMeditationState,\n  meditationsLoadingState,\n)"
      },
      {
        "name": "selectIsQuoteLoaded",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/selectors/home.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectHomeState,\n  quoteLoadedState,\n)"
      },
      {
        "name": "selectIsQuoteLoading",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/selectors/home.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectHomeState,\n  quoteLoadingState,\n)"
      },
      {
        "name": "selectMeditationModuleState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/reducers/meditation.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createFeatureSelector<MeditationModuleState>(meditationFeatureKey)"
      },
      {
        "name": "selectMeditations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectMeditationState,\n  meditationsData,\n)"
      },
      {
        "name": "selectMeditationsByCategoryId",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(categoryId: string) =>\n  createSelector(\n    selectMeditations,\n    (meditations: Meditation[]) =>\n      meditations &&\n      meditations.filter(\n        (meditation: Meditation) => meditation.categoryId === categoryId,\n      ),\n  )"
      },
      {
        "name": "selectMeditationsHasError",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectMeditationState,\n  meditationsErrorState,\n)"
      },
      {
        "name": "selectMeditationState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectMeditationModuleState,\n  (state: MeditationModuleState) => state.meditation,\n)"
      },
      {
        "name": "selectQuote",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/selectors/home.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(selectHomeState, quoteData)"
      },
      {
        "name": "selectQuoteHasError",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/home/store/selectors/home.selector.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "createSelector(\n  selectHomeState,\n  quoteErrorState,\n)"
      },
      {
        "name": "timer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/timer/models/timer.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "{\n  timer: 'play',\n  stats: 'stats',\n} as const"
      }
    ],
    "functions": [],
    "typealiases": [
      {
        "name": "ContentTypes",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "src/app/modules/meditation/models/meditation.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "TimerMenu",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "src/app/modules/timer/models/timer.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      }
    ],
    "enumerations": [],
    "groupedVariables": {
      "src/app/modules/meditation/store/reducers/meditation.reducer.ts": [
        {
          "name": "categoriesData",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: MeditationState) => state.categories"
        },
        {
          "name": "categoriesErrorState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: MeditationState) =>\n  state.isCategoriesError"
        },
        {
          "name": "categoriesLoadedState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: MeditationState) =>\n  state.isCategoriesLoaded"
        },
        {
          "name": "categoriesLoadingState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: MeditationState) =>\n  state.isCategoriesLoading"
        },
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MeditationState",
          "defaultValue": "{\n  // data\n  meditations: null,\n  categories: null,\n  // state\n  isCategoriesLoading: false,\n  isCategoriesLoaded: false,\n  isCategoriesError: false,\n  isMeditationsLoading: false,\n  isMeditationsLoaded: false,\n  isMeditationsError: false,\n}"
        },
        {
          "name": "meditationReducer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createReducer(\n  initialState,\n\n  on(\n    loadCategories,\n    (state): MeditationState => ({\n      ...state,\n      isCategoriesLoading: true,\n      isCategoriesLoaded: false,\n      isCategoriesError: false,\n    }),\n  ),\n\n  on(\n    loadCategoriesFailure,\n    (state): MeditationState => ({\n      ...state,\n      isCategoriesLoading: false,\n      isCategoriesLoaded: false,\n      isCategoriesError: true,\n    }),\n  ),\n\n  on(\n    loadCategoriesSuccess,\n    (state, { categories }): MeditationState => ({\n      ...state,\n      categories,\n      isCategoriesLoading: false,\n      isCategoriesLoaded: true,\n      isCategoriesError: false,\n    }),\n  ),\n\n  on(\n    loadMeditations,\n    (state): MeditationState => ({\n      ...state,\n      isMeditationsLoading: true,\n      isMeditationsLoaded: false,\n      isMeditationsError: false,\n    }),\n  ),\n\n  on(\n    loadMeditationsFailure,\n    (state): MeditationState => ({\n      ...state,\n      isMeditationsLoading: false,\n      isMeditationsLoaded: false,\n      isMeditationsError: true,\n    }),\n  ),\n\n  on(\n    loadMeditationsSuccess,\n    (state, { meditations }): MeditationState => ({\n      ...state,\n      meditations,\n      isMeditationsLoading: false,\n      isMeditationsLoaded: true,\n      isMeditationsError: false,\n    }),\n  ),\n)"
        },
        {
          "name": "meditationsData",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: MeditationState) => state.meditations"
        },
        {
          "name": "meditationsErrorState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: MeditationState) =>\n  state.isMeditationsError"
        },
        {
          "name": "meditationsLoadedState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: MeditationState) =>\n  state.isMeditationsLoaded"
        },
        {
          "name": "meditationsLoadingState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: MeditationState) =>\n  state.isMeditationsLoading"
        },
        {
          "name": "reducer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: MeditationState | undefined, action: Action) =>\n  meditationReducer(state, action)"
        }
      ],
      "src/app/modules/meditation/mocks/category.mock.ts": [
        {
          "name": "categoryMock",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/mocks/category.mock.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Category",
          "defaultValue": "{\n  id: 'categoryId',\n  name: 'Category Name',\n  description: 'Category Description',\n  imageUrl: 'http://domain.com',\n}"
        }
      ],
      "src/app/modules/meditation/models/meditation.model.ts": [
        {
          "name": "content",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/models/meditation.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "{\n  media: 'media',\n  text: 'text',\n} as const"
        }
      ],
      "src/app/modules/timer/models/timer.model.ts": [
        {
          "name": "DEFAULT_DURATION_SECONDS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/timer/models/timer.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "defaultValue": "900"
        },
        {
          "name": "timer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/timer/models/timer.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "{\n  timer: 'play',\n  stats: 'stats',\n} as const"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: true,\n  firebase: {\n    apiKey: 'AIzaSyA02Y_nQiILEC4-TR_cw1hCBFAy3Uzw78I',\n    authDomain: 'meditify-5cd18.firebaseapp.com',\n    databaseURL: 'https://meditify-5cd18.firebaseio.com',\n    projectId: 'meditify-5cd18',\n    storageBucket: 'meditify-5cd18.appspot.com',\n    messagingSenderId: '661526611463',\n    appId: '1:661526611463:web:ad4d2587d5cc613fab8ca2',\n  },\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: 'AIzaSyA02Y_nQiILEC4-TR_cw1hCBFAy3Uzw78I',\n    authDomain: 'meditify-5cd18.firebaseapp.com',\n    databaseURL: 'https://meditify-5cd18.firebaseio.com',\n    projectId: 'meditify-5cd18',\n    storageBucket: 'meditify-5cd18.appspot.com',\n    messagingSenderId: '661526611463',\n    appId: '1:661526611463:web:ad4d2587d5cc613fab8ca2',\n  },\n}"
        }
      ],
      "src/app/modules/meditation/utils/time.utils.ts": [
        {
          "name": "formatTime",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/utils/time.utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(time: number, format: string): string =>\n  dayjs(time * 1000).format(format)"
        }
      ],
      "src/app/modules/home/store/reducers/home.state.ts": [
        {
          "name": "homeFeatureKey",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'home'"
        },
        {
          "name": "reducers",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  home: reducer,\n}"
        },
        {
          "name": "selectHomeModuleState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createFeatureSelector<HomeModuleState>(homeFeatureKey)"
        }
      ],
      "src/app/modules/home/store/reducers/home.reducer.ts": [
        {
          "name": "homeReducer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createReducer(\n  initialState,\n\n  on(\n    loadQuote,\n    (state): HomeState => ({\n      ...state,\n      isQuoteLoading: true,\n      isQuoteLoaded: false,\n      isQuoteError: false,\n    }),\n  ),\n\n  on(\n    loadQuoteFailure,\n    (state): HomeState => ({\n      ...state,\n      isQuoteLoading: false,\n      isQuoteLoaded: false,\n      isQuoteError: true,\n    }),\n  ),\n\n  on(\n    loadQuoteSuccess,\n    (state, { quote }): HomeState => ({\n      ...state,\n      quote,\n      isQuoteLoading: false,\n      isQuoteLoaded: true,\n      isQuoteError: false,\n    }),\n  ),\n)"
        },
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HomeState",
          "defaultValue": "{\n  // data\n  quote: null,\n  // state\n  isQuoteLoading: false,\n  isQuoteLoaded: false,\n  isQuoteError: false,\n}"
        },
        {
          "name": "quoteData",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: HomeState) => state.quote"
        },
        {
          "name": "quoteErrorState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: HomeState) => state.isQuoteError"
        },
        {
          "name": "quoteLoadedState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: HomeState) => state.isQuoteLoaded"
        },
        {
          "name": "quoteLoadingState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: HomeState) => state.isQuoteLoading"
        },
        {
          "name": "reducer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/reducers/home.reducer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(state: HomeState | undefined, action: Action) =>\n  homeReducer(state, action)"
        }
      ],
      "src/app/modules/meditation/constants/media.constants.ts": [
        {
          "name": "INITIAL_MEDIA_STATE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/constants/media.constants.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  canPlay: false,\n  duration: '00:00',\n  durationSec: 0,\n  time: '00:00',\n  timeSec: 0,\n  mediaType: '',\n  loadStart: false,\n  playing: false,\n}"
        }
      ],
      "src/app/modules/meditation/store/actions/meditation.actions.ts": [
        {
          "name": "loadCategories",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createAction(\n  '[Meditation | Categories Page] Load Categories',\n)"
        },
        {
          "name": "loadCategoriesFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createAction(\n  '[Meditation | API] Load Categories Failure',\n  props<{ error: any }>(),\n)"
        },
        {
          "name": "loadCategoriesSuccess",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createAction(\n  '[Meditation | API] Load Categories Success',\n  props<{ categories: Category[] }>(),\n)"
        },
        {
          "name": "loadMeditations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createAction(\n  '[Meditation | Meditations Page] Load Meditations',\n)"
        },
        {
          "name": "loadMeditationsFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createAction(\n  '[Meditation | API] Load Meditations Failure',\n  props<{ error: any }>(),\n)"
        },
        {
          "name": "loadMeditationsSuccess",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/actions/meditation.actions.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createAction(\n  '[Meditation | API] Load Meditations Success',\n  props<{ meditations: Meditation[] }>(),\n)"
        }
      ],
      "src/app/modules/home/store/actions/home.actions.ts": [
        {
          "name": "loadQuote",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/actions/home.actions.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createAction('[Home | Effects Init] Load Quote')"
        },
        {
          "name": "loadQuoteFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/actions/home.actions.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createAction(\n  '[Home | API] Load Quote Failure',\n  props<{ error: any }>(),\n)"
        },
        {
          "name": "loadQuoteSuccess",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/actions/home.actions.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createAction(\n  '[Home | API] Load Quote Success',\n  props<{ quote: string }>(),\n)"
        }
      ],
      "src/app/modules/meditation/store/reducers/meditation.state.ts": [
        {
          "name": "meditationFeatureKey",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'meditation'"
        },
        {
          "name": "reducers",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  meditation: reducer,\n}"
        },
        {
          "name": "selectMeditationModuleState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/reducers/meditation.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createFeatureSelector<MeditationModuleState>(meditationFeatureKey)"
        }
      ],
      "src/app/modules/meditation/mocks/meditation.mock.ts": [
        {
          "name": "meditationMock",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/mocks/meditation.mock.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meditation",
          "defaultValue": "{\n  id: 'id',\n  categoryId: 'categoryId',\n  title: 'Meditation title',\n  text: `\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempo\n  r incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis \n  nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\n  eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, s\n  unt in culpa qui officia deserunt mollit anim id est laborum.\n  `,\n  media: 'https://domain.com',\n  imageUrl: 'https://picsum.photos/seed/picsum/400/600',\n}"
        }
      ],
      "src/app/modules/home/mocks/quote.mock.ts": [
        {
          "name": "quoteMock",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/mocks/quote.mock.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Quote",
          "defaultValue": "{\n  content: 'Test quote',\n  current: true,\n}"
        }
      ],
      "src/app/modules/meditation/store/selectors/meditation.selector.ts": [
        {
          "name": "selectCategories",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectMeditationState,\n  categoriesData,\n)"
        },
        {
          "name": "selectCategoriesHasError",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectMeditationState,\n  categoriesErrorState,\n)"
        },
        {
          "name": "selectCategoryById",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(categoryId: string) =>\n  createSelector(\n    selectCategories,\n    (categories: Category[]) =>\n      categories &&\n      categories.find((category: Category) => category.id === categoryId),\n  )"
        },
        {
          "name": "selectIsCategoriesLoaded",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectMeditationState,\n  categoriesLoadedState,\n)"
        },
        {
          "name": "selectIsCategoriesLoading",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectMeditationState,\n  categoriesLoadingState,\n)"
        },
        {
          "name": "selectIsMeditationsLoaded",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectMeditationState,\n  meditationsLoadedState,\n)"
        },
        {
          "name": "selectIsMeditationsLoading",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectMeditationState,\n  meditationsLoadingState,\n)"
        },
        {
          "name": "selectMeditations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectMeditationState,\n  meditationsData,\n)"
        },
        {
          "name": "selectMeditationsByCategoryId",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(categoryId: string) =>\n  createSelector(\n    selectMeditations,\n    (meditations: Meditation[]) =>\n      meditations &&\n      meditations.filter(\n        (meditation: Meditation) => meditation.categoryId === categoryId,\n      ),\n  )"
        },
        {
          "name": "selectMeditationsHasError",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectMeditationState,\n  meditationsErrorState,\n)"
        },
        {
          "name": "selectMeditationState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectMeditationModuleState,\n  (state: MeditationModuleState) => state.meditation,\n)"
        }
      ],
      "src/app/modules/home/store/selectors/home.selector.ts": [
        {
          "name": "selectHomeState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/selectors/home.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectHomeModuleState,\n  (state: HomeModuleState) => state.home,\n)"
        },
        {
          "name": "selectIsQuoteLoaded",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/selectors/home.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectHomeState,\n  quoteLoadedState,\n)"
        },
        {
          "name": "selectIsQuoteLoading",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/selectors/home.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectHomeState,\n  quoteLoadingState,\n)"
        },
        {
          "name": "selectQuote",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/selectors/home.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(selectHomeState, quoteData)"
        },
        {
          "name": "selectQuoteHasError",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/home/store/selectors/home.selector.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "createSelector(\n  selectHomeState,\n  quoteErrorState,\n)"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {
      "src/app/modules/meditation/models/meditation.model.ts": [
        {
          "name": "ContentTypes",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "src/app/modules/meditation/models/meditation.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ],
      "src/app/modules/timer/models/timer.model.ts": [
        {
          "name": "TimerMenu",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "src/app/modules/timer/models/timer.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        }
      ]
    }
  },
  "routes": {
    "name": "<root>",
    "kind": "module",
    "className": "AppModule",
    "children": [
      {
        "name": "routes",
        "filename": "src/app/app-routing.module.ts",
        "module": "AppRoutingModule",
        "children": [
          {
            "path": "",
            "redirectTo": "home",
            "pathMatch": "full"
          },
          {
            "path": "home",
            "loadChildren": "./modules/home/home.module#HomeModule",
            "children": [
              {
                "kind": "module",
                "children": [
                  {
                    "name": "routes",
                    "filename": "src/app/modules/home/home-routing.module.ts",
                    "module": "HomePageRoutingModule",
                    "children": [
                      {
                        "path": "",
                        "component": "HomeComponent"
                      }
                    ],
                    "kind": "module"
                  }
                ],
                "module": "HomeModule"
              }
            ]
          },
          {
            "path": "meditation",
            "loadChildren": "./modules/meditation/meditation.module#MeditationModule,"
          },
          {
            "path": "timer",
            "loadChildren": "./modules/timer/timer.module#TimerModule",
            "children": [
              {
                "kind": "module",
                "children": [
                  {
                    "name": "routes",
                    "filename": "src/app/modules/timer/timer-routing.module.ts",
                    "module": "TimerRoutingModule",
                    "children": [
                      {
                        "path": "",
                        "component": "TimerContainerComponent",
                        "children": [
                          {
                            "path": "",
                            "redirectTo": "play",
                            "pathMatch": "full"
                          },
                          {
                            "path": "play",
                            "component": "TimerComponent"
                          },
                          {
                            "path": "stats",
                            "component": "StatsComponent"
                          }
                        ]
                      }
                    ],
                    "kind": "module"
                  }
                ],
                "module": "TimerModule"
              }
            ]
          }
        ],
        "kind": "module"
      }
    ]
  },
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/common/ui-lib/buttons-select/components/buttons-select.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonsSelectComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/mocks/quote.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "quoteMock",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/models/quote.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Quote",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/pages/home/home.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HomeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/services/quote.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "QuoteService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/actions/home.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadQuote",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/actions/home.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadQuoteFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/actions/home.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadQuoteSuccess",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/effects/quote-load.effect.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "QuoteLoadEffect",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.reducer.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "HomeState",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "homeReducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "quoteData",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "quoteErrorState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "quoteLoadedState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "quoteLoadingState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "reducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "HomeModuleState",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "homeFeatureKey",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "reducers",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/reducers/home.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectHomeModuleState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/selectors/home.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectHomeState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/selectors/home.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectIsQuoteLoaded",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/selectors/home.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectIsQuoteLoading",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/selectors/home.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectQuote",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/home/store/selectors/home.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectQuoteHasError",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/components/category-card/category-card.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CategoryCardComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/components/media-content/media-content.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MediaContentComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/components/meditation-header/meditation-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MeditationHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/components/meditation-item/meditation-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MeditationItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/components/meditation-modal/meditation-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MeditationModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/components/text-content/text-content.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TextContentComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/constants/media.constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "INITIAL_MEDIA_STATE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/guards/categories.guard.ts",
        "type": "guard",
        "linktype": "guard",
        "name": "CategoriesGuard",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/guards/meditations.guard.ts",
        "type": "guard",
        "linktype": "guard",
        "name": "MeditationsGuard",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/mocks/category.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "categoryMock",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/mocks/meditation.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meditationMock",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/models/category.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Category",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/models/media.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MediaState",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/models/meditation.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Meditation",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/models/meditation.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "content",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/pages/categories/categories.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CategoriesComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/pages/meditations/meditations.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MeditationsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/services/audio-state.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AudioStateService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/services/audio.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AudioService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/services/meditations.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MeditationsService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadCategories",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadCategoriesFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadCategoriesSuccess",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadMeditations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadMeditationsFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/actions/meditation.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadMeditationsSuccess",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/effects/categories-load.effect.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "CategoriesLoadEffect",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/effects/meditations-load.effect.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MeditationsLoadEffect",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MeditationState",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "categoriesData",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "categoriesErrorState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "categoriesLoadedState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "categoriesLoadingState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meditationReducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meditationsData",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meditationsErrorState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meditationsLoadedState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meditationsLoadingState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "reducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MeditationModuleState",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meditationFeatureKey",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "reducers",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/reducers/meditation.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectMeditationModuleState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectCategories",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectCategoriesHasError",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectCategoryById",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectIsCategoriesLoaded",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectIsCategoriesLoading",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectIsMeditationsLoaded",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectIsMeditationsLoading",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectMeditations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectMeditationsByCategoryId",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectMeditationsHasError",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/store/selectors/meditation.selector.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectMeditationState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/meditation/utils/time.utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "formatTime",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/timer/components/timer-duration/timer-duration.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TimerDurationComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/timer/components/timer-modal/timer-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TimerModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/timer/models/timer.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_DURATION_SECONDS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/timer/models/timer.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "timer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/timer/pages/stats/stats.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StatsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/timer/pages/timer-container/timer-container.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TimerContainerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/timer/pages/timer/timer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TimerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
